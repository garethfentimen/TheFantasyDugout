'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="LaGiga-10-08-2011")>  _
Partial Public Class LaGigaClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPlayer(instance As Player)
    End Sub
  Partial Private Sub UpdatePlayer(instance As Player)
    End Sub
  Partial Private Sub DeletePlayer(instance As Player)
    End Sub
  Partial Private Sub InsertFixture(instance As Fixture)
    End Sub
  Partial Private Sub UpdateFixture(instance As Fixture)
    End Sub
  Partial Private Sub DeleteFixture(instance As Fixture)
    End Sub
  Partial Private Sub InsertEventType(instance As EventType)
    End Sub
  Partial Private Sub UpdateEventType(instance As EventType)
    End Sub
  Partial Private Sub DeleteEventType(instance As EventType)
    End Sub
  Partial Private Sub InsertEvent(instance As [Event])
    End Sub
  Partial Private Sub UpdateEvent(instance As [Event])
    End Sub
  Partial Private Sub DeleteEvent(instance As [Event])
    End Sub
  Partial Private Sub InsertSeasonResult(instance As SeasonResult)
    End Sub
  Partial Private Sub UpdateSeasonResult(instance As SeasonResult)
    End Sub
  Partial Private Sub DeleteSeasonResult(instance As SeasonResult)
    End Sub
  Partial Private Sub InsertUserFixtureCalculation(instance As UserFixtureCalculation)
    End Sub
  Partial Private Sub UpdateUserFixtureCalculation(instance As UserFixtureCalculation)
    End Sub
  Partial Private Sub DeleteUserFixtureCalculation(instance As UserFixtureCalculation)
    End Sub
  Partial Private Sub InsertUserTeam(instance As UserTeam)
    End Sub
  Partial Private Sub UpdateUserTeam(instance As UserTeam)
    End Sub
  Partial Private Sub DeleteUserTeam(instance As UserTeam)
    End Sub
  Partial Private Sub InsertUserPlayer(instance As UserPlayer)
    End Sub
  Partial Private Sub UpdateUserPlayer(instance As UserPlayer)
    End Sub
  Partial Private Sub DeleteUserPlayer(instance As UserPlayer)
    End Sub
  Partial Private Sub InsertTransfer(instance As Transfer)
    End Sub
  Partial Private Sub UpdateTransfer(instance As Transfer)
    End Sub
  Partial Private Sub DeleteTransfer(instance As Transfer)
    End Sub
  Partial Private Sub InsertWeek(instance As Week)
    End Sub
  Partial Private Sub UpdateWeek(instance As Week)
    End Sub
  Partial Private Sub DeleteWeek(instance As Week)
    End Sub
  Partial Private Sub InsertUserGroup(instance As UserGroup)
    End Sub
  Partial Private Sub UpdateUserGroup(instance As UserGroup)
    End Sub
  Partial Private Sub DeleteUserGroup(instance As UserGroup)
    End Sub
  Partial Private Sub InsertWeekUserPlayer(instance As WeekUserPlayer)
    End Sub
  Partial Private Sub UpdateWeekUserPlayer(instance As WeekUserPlayer)
    End Sub
  Partial Private Sub DeleteWeekUserPlayer(instance As WeekUserPlayer)
    End Sub
  Partial Private Sub InsertTeam(instance As Team)
    End Sub
  Partial Private Sub UpdateTeam(instance As Team)
    End Sub
  Partial Private Sub DeleteTeam(instance As Team)
    End Sub
  Partial Private Sub InsertCompetition(instance As Competition)
    End Sub
  Partial Private Sub UpdateCompetition(instance As Competition)
    End Sub
  Partial Private Sub DeleteCompetition(instance As Competition)
    End Sub
  Partial Private Sub InsertTheList(instance As TheList)
    End Sub
  Partial Private Sub UpdateTheList(instance As TheList)
    End Sub
  Partial Private Sub DeleteTheList(instance As TheList)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("ApplicationServices").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Players() As System.Data.Linq.Table(Of Player)
		Get
			Return Me.GetTable(Of Player)
		End Get
	End Property
	
	Public ReadOnly Property Fixtures() As System.Data.Linq.Table(Of Fixture)
		Get
			Return Me.GetTable(Of Fixture)
		End Get
	End Property
	
	Public ReadOnly Property EventTypes() As System.Data.Linq.Table(Of EventType)
		Get
			Return Me.GetTable(Of EventType)
		End Get
	End Property
	
	Public ReadOnly Property Events() As System.Data.Linq.Table(Of [Event])
		Get
			Return Me.GetTable(Of [Event])
		End Get
	End Property
	
	Public ReadOnly Property SeasonResults() As System.Data.Linq.Table(Of SeasonResult)
		Get
			Return Me.GetTable(Of SeasonResult)
		End Get
	End Property
	
	Public ReadOnly Property UserFixtureCalculations() As System.Data.Linq.Table(Of UserFixtureCalculation)
		Get
			Return Me.GetTable(Of UserFixtureCalculation)
		End Get
	End Property
	
	Public ReadOnly Property UserTeams() As System.Data.Linq.Table(Of UserTeam)
		Get
			Return Me.GetTable(Of UserTeam)
		End Get
	End Property
	
	Public ReadOnly Property UserPlayers() As System.Data.Linq.Table(Of UserPlayer)
		Get
			Return Me.GetTable(Of UserPlayer)
		End Get
	End Property
	
	Public ReadOnly Property Transfers() As System.Data.Linq.Table(Of Transfer)
		Get
			Return Me.GetTable(Of Transfer)
		End Get
	End Property
	
	Public ReadOnly Property Weeks() As System.Data.Linq.Table(Of Week)
		Get
			Return Me.GetTable(Of Week)
		End Get
	End Property
	
	Public ReadOnly Property UserGroups() As System.Data.Linq.Table(Of UserGroup)
		Get
			Return Me.GetTable(Of UserGroup)
		End Get
	End Property
	
	Public ReadOnly Property WeekUserPlayers() As System.Data.Linq.Table(Of WeekUserPlayer)
		Get
			Return Me.GetTable(Of WeekUserPlayer)
		End Get
	End Property
	
	Public ReadOnly Property Teams() As System.Data.Linq.Table(Of Team)
		Get
			Return Me.GetTable(Of Team)
		End Get
	End Property
	
	Public ReadOnly Property Competitions() As System.Data.Linq.Table(Of Competition)
		Get
			Return Me.GetTable(Of Competition)
		End Get
	End Property
	
	Public ReadOnly Property TheLists() As System.Data.Linq.Table(Of TheList)
		Get
			Return Me.GetTable(Of TheList)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Player")>  _
Partial Public Class Player
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PlayerID As Integer
	
	Private _FirstName As String
	
	Private _Surname As String
	
	Private _PositionID As Integer
	
	Private _TeamID As Integer
	
	Private _NationalTeamID As Integer
	
	Private _Events As EntitySet(Of [Event])
	
	Private _UserPlayers As EntitySet(Of UserPlayer)
	
	Private _Transfers As EntitySet(Of Transfer)
	
	Private _WeekUserPlayers As EntitySet(Of WeekUserPlayer)
	
	Private _TheLists As EntitySet(Of TheList)
	
	Private _Team As EntityRef(Of Team)
	
	Private _Team1 As EntityRef(Of Team)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPlayerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlayerIDChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnPositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPositionIDChanged()
    End Sub
    Partial Private Sub OnTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTeamIDChanged()
    End Sub
    Partial Private Sub OnNationalTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnNationalTeamIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Events = New EntitySet(Of [Event])(AddressOf Me.attach_Events, AddressOf Me.detach_Events)
		Me._UserPlayers = New EntitySet(Of UserPlayer)(AddressOf Me.attach_UserPlayers, AddressOf Me.detach_UserPlayers)
		Me._Transfers = New EntitySet(Of Transfer)(AddressOf Me.attach_Transfers, AddressOf Me.detach_Transfers)
		Me._WeekUserPlayers = New EntitySet(Of WeekUserPlayer)(AddressOf Me.attach_WeekUserPlayers, AddressOf Me.detach_WeekUserPlayers)
		Me._TheLists = New EntitySet(Of TheList)(AddressOf Me.attach_TheLists, AddressOf Me.detach_TheLists)
		Me._Team = CType(Nothing, EntityRef(Of Team))
		Me._Team1 = CType(Nothing, EntityRef(Of Team))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlayerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PlayerID() As Integer
		Get
			Return Me._PlayerID
		End Get
		Set
			If ((Me._PlayerID = value)  _
						= false) Then
				Me.OnPlayerIDChanging(value)
				Me.SendPropertyChanging
				Me._PlayerID = value
				Me.SendPropertyChanged("PlayerID")
				Me.OnPlayerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me.OnSurnameChanging(value)
				Me.SendPropertyChanging
				Me._Surname = value
				Me.SendPropertyChanged("Surname")
				Me.OnSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionID", DbType:="Int NOT NULL")>  _
	Public Property PositionID() As Integer
		Get
			Return Me._PositionID
		End Get
		Set
			If ((Me._PositionID = value)  _
						= false) Then
				Me.OnPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._PositionID = value
				Me.SendPropertyChanged("PositionID")
				Me.OnPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeamID", DbType:="Int NOT NULL")>  _
	Public Property TeamID() As Integer
		Get
			Return Me._TeamID
		End Get
		Set
			If ((Me._TeamID = value)  _
						= false) Then
				If Me._Team.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._TeamID = value
				Me.SendPropertyChanged("TeamID")
				Me.OnTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NationalTeamID", DbType:="Int NOT NULL")>  _
	Public Property NationalTeamID() As Integer
		Get
			Return Me._NationalTeamID
		End Get
		Set
			If ((Me._NationalTeamID = value)  _
						= false) Then
				If Me._Team1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNationalTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._NationalTeamID = value
				Me.SendPropertyChanged("NationalTeamID")
				Me.OnNationalTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_Event", Storage:="_Events", ThisKey:="PlayerID", OtherKey:="PlayerID")>  _
	Public Property Events() As EntitySet(Of [Event])
		Get
			Return Me._Events
		End Get
		Set
			Me._Events.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_UserPlayer", Storage:="_UserPlayers", ThisKey:="PlayerID", OtherKey:="PlayerID")>  _
	Public Property UserPlayers() As EntitySet(Of UserPlayer)
		Get
			Return Me._UserPlayers
		End Get
		Set
			Me._UserPlayers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_Transfer", Storage:="_Transfers", ThisKey:="PlayerID", OtherKey:="PlayerID")>  _
	Public Property Transfers() As EntitySet(Of Transfer)
		Get
			Return Me._Transfers
		End Get
		Set
			Me._Transfers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_WeekUserPlayer", Storage:="_WeekUserPlayers", ThisKey:="PlayerID", OtherKey:="PlayerID")>  _
	Public Property WeekUserPlayers() As EntitySet(Of WeekUserPlayer)
		Get
			Return Me._WeekUserPlayers
		End Get
		Set
			Me._WeekUserPlayers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_TheList", Storage:="_TheLists", ThisKey:="PlayerID", OtherKey:="PlayerID")>  _
	Public Property TheLists() As EntitySet(Of TheList)
		Get
			Return Me._TheLists
		End Get
		Set
			Me._TheLists.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Player", Storage:="_Team", ThisKey:="TeamID", OtherKey:="TeamID", IsForeignKey:=true)>  _
	Public Property Team() As Team
		Get
			Return Me._Team.Entity
		End Get
		Set
			Dim previousValue As Team = Me._Team.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Team.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Team.Entity = Nothing
					previousValue.Players.Remove(Me)
				End If
				Me._Team.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Players.Add(Me)
					Me._TeamID = value.TeamID
				Else
					Me._TeamID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Team")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Player1", Storage:="_Team1", ThisKey:="NationalTeamID", OtherKey:="TeamID", IsForeignKey:=true)>  _
	Public Property Team1() As Team
		Get
			Return Me._Team1.Entity
		End Get
		Set
			Dim previousValue As Team = Me._Team1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Team1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Team1.Entity = Nothing
					previousValue.Players1.Remove(Me)
				End If
				Me._Team1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Players1.Add(Me)
					Me._NationalTeamID = value.TeamID
				Else
					Me._NationalTeamID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Team1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Events(ByVal entity As [Event])
		Me.SendPropertyChanging
		entity.Player = Me
	End Sub
	
	Private Sub detach_Events(ByVal entity As [Event])
		Me.SendPropertyChanging
		entity.Player = Nothing
	End Sub
	
	Private Sub attach_UserPlayers(ByVal entity As UserPlayer)
		Me.SendPropertyChanging
		entity.Player = Me
	End Sub
	
	Private Sub detach_UserPlayers(ByVal entity As UserPlayer)
		Me.SendPropertyChanging
		entity.Player = Nothing
	End Sub
	
	Private Sub attach_Transfers(ByVal entity As Transfer)
		Me.SendPropertyChanging
		entity.Player = Me
	End Sub
	
	Private Sub detach_Transfers(ByVal entity As Transfer)
		Me.SendPropertyChanging
		entity.Player = Nothing
	End Sub
	
	Private Sub attach_WeekUserPlayers(ByVal entity As WeekUserPlayer)
		Me.SendPropertyChanging
		entity.Player = Me
	End Sub
	
	Private Sub detach_WeekUserPlayers(ByVal entity As WeekUserPlayer)
		Me.SendPropertyChanging
		entity.Player = Nothing
	End Sub
	
	Private Sub attach_TheLists(ByVal entity As TheList)
		Me.SendPropertyChanging
		entity.Player = Me
	End Sub
	
	Private Sub detach_TheLists(ByVal entity As TheList)
		Me.SendPropertyChanging
		entity.Player = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Fixture")>  _
Partial Public Class Fixture
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FixtureID As Integer
	
	Private _WeekID As Integer
	
	Private _HomeTeamID As Integer
	
	Private _AwayTeamID As Integer
	
	Private _HomeScore As Integer
	
	Private _AwayScore As Integer
	
	Private _Week As EntityRef(Of Week)
	
	Private _Team As EntityRef(Of Team)
	
	Private _Team1 As EntityRef(Of Team)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFixtureIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFixtureIDChanged()
    End Sub
    Partial Private Sub OnWeekIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekIDChanged()
    End Sub
    Partial Private Sub OnHomeTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnHomeTeamIDChanged()
    End Sub
    Partial Private Sub OnAwayTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAwayTeamIDChanged()
    End Sub
    Partial Private Sub OnHomeScoreChanging(value As Integer)
    End Sub
    Partial Private Sub OnHomeScoreChanged()
    End Sub
    Partial Private Sub OnAwayScoreChanging(value As Integer)
    End Sub
    Partial Private Sub OnAwayScoreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Week = CType(Nothing, EntityRef(Of Week))
		Me._Team = CType(Nothing, EntityRef(Of Team))
		Me._Team1 = CType(Nothing, EntityRef(Of Team))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FixtureID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FixtureID() As Integer
		Get
			Return Me._FixtureID
		End Get
		Set
			If ((Me._FixtureID = value)  _
						= false) Then
				Me.OnFixtureIDChanging(value)
				Me.SendPropertyChanging
				Me._FixtureID = value
				Me.SendPropertyChanged("FixtureID")
				Me.OnFixtureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekID", DbType:="Int NOT NULL")>  _
	Public Property WeekID() As Integer
		Get
			Return Me._WeekID
		End Get
		Set
			If ((Me._WeekID = value)  _
						= false) Then
				If Me._Week.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWeekIDChanging(value)
				Me.SendPropertyChanging
				Me._WeekID = value
				Me.SendPropertyChanged("WeekID")
				Me.OnWeekIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomeTeamID", DbType:="Int NOT NULL")>  _
	Public Property HomeTeamID() As Integer
		Get
			Return Me._HomeTeamID
		End Get
		Set
			If ((Me._HomeTeamID = value)  _
						= false) Then
				If Me._Team1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHomeTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._HomeTeamID = value
				Me.SendPropertyChanged("HomeTeamID")
				Me.OnHomeTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AwayTeamID", DbType:="Int NOT NULL")>  _
	Public Property AwayTeamID() As Integer
		Get
			Return Me._AwayTeamID
		End Get
		Set
			If ((Me._AwayTeamID = value)  _
						= false) Then
				If Me._Team.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAwayTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._AwayTeamID = value
				Me.SendPropertyChanged("AwayTeamID")
				Me.OnAwayTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomeScore", DbType:="Int NOT NULL")>  _
	Public Property HomeScore() As Integer
		Get
			Return Me._HomeScore
		End Get
		Set
			If ((Me._HomeScore = value)  _
						= false) Then
				Me.OnHomeScoreChanging(value)
				Me.SendPropertyChanging
				Me._HomeScore = value
				Me.SendPropertyChanged("HomeScore")
				Me.OnHomeScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AwayScore", DbType:="Int NOT NULL")>  _
	Public Property AwayScore() As Integer
		Get
			Return Me._AwayScore
		End Get
		Set
			If ((Me._AwayScore = value)  _
						= false) Then
				Me.OnAwayScoreChanging(value)
				Me.SendPropertyChanging
				Me._AwayScore = value
				Me.SendPropertyChanged("AwayScore")
				Me.OnAwayScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Week_Fixture", Storage:="_Week", ThisKey:="WeekID", OtherKey:="WeekID", IsForeignKey:=true)>  _
	Public Property Week() As Week
		Get
			Return Me._Week.Entity
		End Get
		Set
			Dim previousValue As Week = Me._Week.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Week.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Week.Entity = Nothing
					previousValue.Fixtures.Remove(Me)
				End If
				Me._Week.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Fixtures.Add(Me)
					Me._WeekID = value.WeekID
				Else
					Me._WeekID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Week")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Fixture", Storage:="_Team", ThisKey:="AwayTeamID", OtherKey:="TeamID", IsForeignKey:=true)>  _
	Public Property Team() As Team
		Get
			Return Me._Team.Entity
		End Get
		Set
			Dim previousValue As Team = Me._Team.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Team.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Team.Entity = Nothing
					previousValue.Fixtures.Remove(Me)
				End If
				Me._Team.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Fixtures.Add(Me)
					Me._AwayTeamID = value.TeamID
				Else
					Me._AwayTeamID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Team")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Fixture1", Storage:="_Team1", ThisKey:="HomeTeamID", OtherKey:="TeamID", IsForeignKey:=true)>  _
	Public Property Team1() As Team
		Get
			Return Me._Team1.Entity
		End Get
		Set
			Dim previousValue As Team = Me._Team1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Team1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Team1.Entity = Nothing
					previousValue.Fixtures1.Remove(Me)
				End If
				Me._Team1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Fixtures1.Add(Me)
					Me._HomeTeamID = value.TeamID
				Else
					Me._HomeTeamID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Team1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EventType")>  _
Partial Public Class EventType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EventTypeID As Integer
	
	Private _EventName As String
	
	Private _Points As Double
	
	Private _PositionID As Integer
	
	Private _Master As System.Nullable(Of Boolean)
	
	Private _Events As EntitySet(Of [Event])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventTypeIDChanged()
    End Sub
    Partial Private Sub OnEventNameChanging(value As String)
    End Sub
    Partial Private Sub OnEventNameChanged()
    End Sub
    Partial Private Sub OnPointsChanging(value As Double)
    End Sub
    Partial Private Sub OnPointsChanged()
    End Sub
    Partial Private Sub OnPositionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPositionIDChanged()
    End Sub
    Partial Private Sub OnMasterChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnMasterChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Events = New EntitySet(Of [Event])(AddressOf Me.attach_Events, AddressOf Me.detach_Events)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EventTypeID() As Integer
		Get
			Return Me._EventTypeID
		End Get
		Set
			If ((Me._EventTypeID = value)  _
						= false) Then
				Me.OnEventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._EventTypeID = value
				Me.SendPropertyChanged("EventTypeID")
				Me.OnEventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EventName() As String
		Get
			Return Me._EventName
		End Get
		Set
			If (String.Equals(Me._EventName, value) = false) Then
				Me.OnEventNameChanging(value)
				Me.SendPropertyChanging
				Me._EventName = value
				Me.SendPropertyChanged("EventName")
				Me.OnEventNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Float NOT NULL")>  _
	Public Property Points() As Double
		Get
			Return Me._Points
		End Get
		Set
			If ((Me._Points = value)  _
						= false) Then
				Me.OnPointsChanging(value)
				Me.SendPropertyChanging
				Me._Points = value
				Me.SendPropertyChanged("Points")
				Me.OnPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionID", DbType:="Int NOT NULL")>  _
	Public Property PositionID() As Integer
		Get
			Return Me._PositionID
		End Get
		Set
			If ((Me._PositionID = value)  _
						= false) Then
				Me.OnPositionIDChanging(value)
				Me.SendPropertyChanging
				Me._PositionID = value
				Me.SendPropertyChanged("PositionID")
				Me.OnPositionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Master", DbType:="Bit")>  _
	Public Property Master() As System.Nullable(Of Boolean)
		Get
			Return Me._Master
		End Get
		Set
			If (Me._Master.Equals(value) = false) Then
				Me.OnMasterChanging(value)
				Me.SendPropertyChanging
				Me._Master = value
				Me.SendPropertyChanged("Master")
				Me.OnMasterChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EventType_Event", Storage:="_Events", ThisKey:="EventTypeID", OtherKey:="EventTypeID")>  _
	Public Property Events() As EntitySet(Of [Event])
		Get
			Return Me._Events
		End Get
		Set
			Me._Events.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Events(ByVal entity As [Event])
		Me.SendPropertyChanging
		entity.EventType = Me
	End Sub
	
	Private Sub detach_Events(ByVal entity As [Event])
		Me.SendPropertyChanging
		entity.EventType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Event")>  _
Partial Public Class [Event]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EventID As Integer
	
	Private _EventTypeID As Integer
	
	Private _PlayerID As Integer
	
	Private _FixtureID As Integer
	
	Private _FromMinute As Integer
	
	Private _ToMinute As System.Nullable(Of Integer)
	
	Private _WeekID As Integer
	
	Private _Points As Single
	
	Private _EventType As EntityRef(Of EventType)
	
	Private _Player As EntityRef(Of Player)
	
	Private _Week As EntityRef(Of Week)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEventIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventIDChanged()
    End Sub
    Partial Private Sub OnEventTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEventTypeIDChanged()
    End Sub
    Partial Private Sub OnPlayerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlayerIDChanged()
    End Sub
    Partial Private Sub OnFixtureIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnFixtureIDChanged()
    End Sub
    Partial Private Sub OnFromMinuteChanging(value As Integer)
    End Sub
    Partial Private Sub OnFromMinuteChanged()
    End Sub
    Partial Private Sub OnToMinuteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnToMinuteChanged()
    End Sub
    Partial Private Sub OnWeekIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekIDChanged()
    End Sub
    Partial Private Sub OnPointsChanging(value As Single)
    End Sub
    Partial Private Sub OnPointsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EventType = CType(Nothing, EntityRef(Of EventType))
		Me._Player = CType(Nothing, EntityRef(Of Player))
		Me._Week = CType(Nothing, EntityRef(Of Week))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EventID() As Integer
		Get
			Return Me._EventID
		End Get
		Set
			If ((Me._EventID = value)  _
						= false) Then
				Me.OnEventIDChanging(value)
				Me.SendPropertyChanging
				Me._EventID = value
				Me.SendPropertyChanged("EventID")
				Me.OnEventIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EventTypeID", DbType:="Int NOT NULL")>  _
	Public Property EventTypeID() As Integer
		Get
			Return Me._EventTypeID
		End Get
		Set
			If ((Me._EventTypeID = value)  _
						= false) Then
				If Me._EventType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEventTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._EventTypeID = value
				Me.SendPropertyChanged("EventTypeID")
				Me.OnEventTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlayerID", DbType:="Int NOT NULL")>  _
	Public Property PlayerID() As Integer
		Get
			Return Me._PlayerID
		End Get
		Set
			If ((Me._PlayerID = value)  _
						= false) Then
				If Me._Player.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlayerIDChanging(value)
				Me.SendPropertyChanging
				Me._PlayerID = value
				Me.SendPropertyChanged("PlayerID")
				Me.OnPlayerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FixtureID", DbType:="Int NOT NULL")>  _
	Public Property FixtureID() As Integer
		Get
			Return Me._FixtureID
		End Get
		Set
			If ((Me._FixtureID = value)  _
						= false) Then
				Me.OnFixtureIDChanging(value)
				Me.SendPropertyChanging
				Me._FixtureID = value
				Me.SendPropertyChanged("FixtureID")
				Me.OnFixtureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromMinute", DbType:="Int NOT NULL")>  _
	Public Property FromMinute() As Integer
		Get
			Return Me._FromMinute
		End Get
		Set
			If ((Me._FromMinute = value)  _
						= false) Then
				Me.OnFromMinuteChanging(value)
				Me.SendPropertyChanging
				Me._FromMinute = value
				Me.SendPropertyChanged("FromMinute")
				Me.OnFromMinuteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToMinute", DbType:="Int")>  _
	Public Property ToMinute() As System.Nullable(Of Integer)
		Get
			Return Me._ToMinute
		End Get
		Set
			If (Me._ToMinute.Equals(value) = false) Then
				Me.OnToMinuteChanging(value)
				Me.SendPropertyChanging
				Me._ToMinute = value
				Me.SendPropertyChanged("ToMinute")
				Me.OnToMinuteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekID", DbType:="Int NOT NULL")>  _
	Public Property WeekID() As Integer
		Get
			Return Me._WeekID
		End Get
		Set
			If ((Me._WeekID = value)  _
						= false) Then
				If Me._Week.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWeekIDChanging(value)
				Me.SendPropertyChanging
				Me._WeekID = value
				Me.SendPropertyChanged("WeekID")
				Me.OnWeekIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Real NOT NULL")>  _
	Public Property Points() As Single
		Get
			Return Me._Points
		End Get
		Set
			If ((Me._Points = value)  _
						= false) Then
				Me.OnPointsChanging(value)
				Me.SendPropertyChanging
				Me._Points = value
				Me.SendPropertyChanged("Points")
				Me.OnPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EventType_Event", Storage:="_EventType", ThisKey:="EventTypeID", OtherKey:="EventTypeID", IsForeignKey:=true)>  _
	Public Property EventType() As EventType
		Get
			Return Me._EventType.Entity
		End Get
		Set
			Dim previousValue As EventType = Me._EventType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EventType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EventType.Entity = Nothing
					previousValue.Events.Remove(Me)
				End If
				Me._EventType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Events.Add(Me)
					Me._EventTypeID = value.EventTypeID
				Else
					Me._EventTypeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EventType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_Event", Storage:="_Player", ThisKey:="PlayerID", OtherKey:="PlayerID", IsForeignKey:=true)>  _
	Public Property Player() As Player
		Get
			Return Me._Player.Entity
		End Get
		Set
			Dim previousValue As Player = Me._Player.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Player.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Player.Entity = Nothing
					previousValue.Events.Remove(Me)
				End If
				Me._Player.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Events.Add(Me)
					Me._PlayerID = value.PlayerID
				Else
					Me._PlayerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Player")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Week_Event", Storage:="_Week", ThisKey:="WeekID", OtherKey:="WeekID", IsForeignKey:=true)>  _
	Public Property Week() As Week
		Get
			Return Me._Week.Entity
		End Get
		Set
			Dim previousValue As Week = Me._Week.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Week.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Week.Entity = Nothing
					previousValue.Events.Remove(Me)
				End If
				Me._Week.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Events.Add(Me)
					Me._WeekID = value.WeekID
				Else
					Me._WeekID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Week")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SeasonResult")>  _
Partial Public Class SeasonResult
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SeasonResultID As Integer
	
	Private _UserTeamID As Integer
	
	Private _WeekID As Integer
	
	Private _Won As Integer
	
	Private _Drawn As Integer
	
	Private _Lost As Integer
	
	Private _GoalsScored As Single
	
	Private _Points As Single
	
	Private _UserTeam As EntityRef(Of UserTeam)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSeasonResultIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSeasonResultIDChanged()
    End Sub
    Partial Private Sub OnUserTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserTeamIDChanged()
    End Sub
    Partial Private Sub OnWeekIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekIDChanged()
    End Sub
    Partial Private Sub OnWonChanging(value As Integer)
    End Sub
    Partial Private Sub OnWonChanged()
    End Sub
    Partial Private Sub OnDrawnChanging(value As Integer)
    End Sub
    Partial Private Sub OnDrawnChanged()
    End Sub
    Partial Private Sub OnLostChanging(value As Integer)
    End Sub
    Partial Private Sub OnLostChanged()
    End Sub
    Partial Private Sub OnGoalsScoredChanging(value As Single)
    End Sub
    Partial Private Sub OnGoalsScoredChanged()
    End Sub
    Partial Private Sub OnPointsChanging(value As Single)
    End Sub
    Partial Private Sub OnPointsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserTeam = CType(Nothing, EntityRef(Of UserTeam))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeasonResultID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SeasonResultID() As Integer
		Get
			Return Me._SeasonResultID
		End Get
		Set
			If ((Me._SeasonResultID = value)  _
						= false) Then
				Me.OnSeasonResultIDChanging(value)
				Me.SendPropertyChanging
				Me._SeasonResultID = value
				Me.SendPropertyChanged("SeasonResultID")
				Me.OnSeasonResultIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTeamID", DbType:="Int NOT NULL")>  _
	Public Property UserTeamID() As Integer
		Get
			Return Me._UserTeamID
		End Get
		Set
			If ((Me._UserTeamID = value)  _
						= false) Then
				If Me._UserTeam.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._UserTeamID = value
				Me.SendPropertyChanged("UserTeamID")
				Me.OnUserTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekID", DbType:="Int NOT NULL")>  _
	Public Property WeekID() As Integer
		Get
			Return Me._WeekID
		End Get
		Set
			If ((Me._WeekID = value)  _
						= false) Then
				Me.OnWeekIDChanging(value)
				Me.SendPropertyChanging
				Me._WeekID = value
				Me.SendPropertyChanged("WeekID")
				Me.OnWeekIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Won", DbType:="Int NOT NULL")>  _
	Public Property Won() As Integer
		Get
			Return Me._Won
		End Get
		Set
			If ((Me._Won = value)  _
						= false) Then
				Me.OnWonChanging(value)
				Me.SendPropertyChanging
				Me._Won = value
				Me.SendPropertyChanged("Won")
				Me.OnWonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Drawn", DbType:="Int NOT NULL")>  _
	Public Property Drawn() As Integer
		Get
			Return Me._Drawn
		End Get
		Set
			If ((Me._Drawn = value)  _
						= false) Then
				Me.OnDrawnChanging(value)
				Me.SendPropertyChanging
				Me._Drawn = value
				Me.SendPropertyChanged("Drawn")
				Me.OnDrawnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lost", DbType:="Int NOT NULL")>  _
	Public Property Lost() As Integer
		Get
			Return Me._Lost
		End Get
		Set
			If ((Me._Lost = value)  _
						= false) Then
				Me.OnLostChanging(value)
				Me.SendPropertyChanging
				Me._Lost = value
				Me.SendPropertyChanged("Lost")
				Me.OnLostChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GoalsScored", DbType:="Real NOT NULL")>  _
	Public Property GoalsScored() As Single
		Get
			Return Me._GoalsScored
		End Get
		Set
			If ((Me._GoalsScored = value)  _
						= false) Then
				Me.OnGoalsScoredChanging(value)
				Me.SendPropertyChanging
				Me._GoalsScored = value
				Me.SendPropertyChanged("GoalsScored")
				Me.OnGoalsScoredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Points", DbType:="Real NOT NULL")>  _
	Public Property Points() As Single
		Get
			Return Me._Points
		End Get
		Set
			If ((Me._Points = value)  _
						= false) Then
				Me.OnPointsChanging(value)
				Me.SendPropertyChanging
				Me._Points = value
				Me.SendPropertyChanged("Points")
				Me.OnPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTeam_SeasonResult", Storage:="_UserTeam", ThisKey:="UserTeamID", OtherKey:="UserTeamID", IsForeignKey:=true)>  _
	Public Property UserTeam() As UserTeam
		Get
			Return Me._UserTeam.Entity
		End Get
		Set
			Dim previousValue As UserTeam = Me._UserTeam.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserTeam.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserTeam.Entity = Nothing
					previousValue.SeasonResults.Remove(Me)
				End If
				Me._UserTeam.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SeasonResults.Add(Me)
					Me._UserTeamID = value.UserTeamID
				Else
					Me._UserTeamID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("UserTeam")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserFixtureCalculation")>  _
Partial Public Class UserFixtureCalculation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserFixtureCalculationID As Integer
	
	Private _WeekNo As Integer
	
	Private _UserTeamIDA As Integer
	
	Private _UserTeamIDB As Integer
	
	Private _NoPlayers As System.Nullable(Of Integer)
	
	Private _UserTeam As EntityRef(Of UserTeam)
	
	Private _UserTeam1 As EntityRef(Of UserTeam)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserFixtureCalculationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserFixtureCalculationIDChanged()
    End Sub
    Partial Private Sub OnWeekNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekNoChanged()
    End Sub
    Partial Private Sub OnUserTeamIDAChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserTeamIDAChanged()
    End Sub
    Partial Private Sub OnUserTeamIDBChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserTeamIDBChanged()
    End Sub
    Partial Private Sub OnNoPlayersChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoPlayersChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserTeam = CType(Nothing, EntityRef(Of UserTeam))
		Me._UserTeam1 = CType(Nothing, EntityRef(Of UserTeam))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserFixtureCalculationID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserFixtureCalculationID() As Integer
		Get
			Return Me._UserFixtureCalculationID
		End Get
		Set
			If ((Me._UserFixtureCalculationID = value)  _
						= false) Then
				Me.OnUserFixtureCalculationIDChanging(value)
				Me.SendPropertyChanging
				Me._UserFixtureCalculationID = value
				Me.SendPropertyChanged("UserFixtureCalculationID")
				Me.OnUserFixtureCalculationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekNo", DbType:="Int NOT NULL")>  _
	Public Property WeekNo() As Integer
		Get
			Return Me._WeekNo
		End Get
		Set
			If ((Me._WeekNo = value)  _
						= false) Then
				Me.OnWeekNoChanging(value)
				Me.SendPropertyChanging
				Me._WeekNo = value
				Me.SendPropertyChanged("WeekNo")
				Me.OnWeekNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTeamIDA", DbType:="Int NOT NULL")>  _
	Public Property UserTeamIDA() As Integer
		Get
			Return Me._UserTeamIDA
		End Get
		Set
			If ((Me._UserTeamIDA = value)  _
						= false) Then
				If Me._UserTeam.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserTeamIDAChanging(value)
				Me.SendPropertyChanging
				Me._UserTeamIDA = value
				Me.SendPropertyChanged("UserTeamIDA")
				Me.OnUserTeamIDAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTeamIDB", DbType:="Int NOT NULL")>  _
	Public Property UserTeamIDB() As Integer
		Get
			Return Me._UserTeamIDB
		End Get
		Set
			If ((Me._UserTeamIDB = value)  _
						= false) Then
				If Me._UserTeam1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserTeamIDBChanging(value)
				Me.SendPropertyChanging
				Me._UserTeamIDB = value
				Me.SendPropertyChanged("UserTeamIDB")
				Me.OnUserTeamIDBChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoPlayers", DbType:="Int")>  _
	Public Property NoPlayers() As System.Nullable(Of Integer)
		Get
			Return Me._NoPlayers
		End Get
		Set
			If (Me._NoPlayers.Equals(value) = false) Then
				Me.OnNoPlayersChanging(value)
				Me.SendPropertyChanging
				Me._NoPlayers = value
				Me.SendPropertyChanged("NoPlayers")
				Me.OnNoPlayersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTeam_UserFixtureCalculation", Storage:="_UserTeam", ThisKey:="UserTeamIDA", OtherKey:="UserTeamID", IsForeignKey:=true)>  _
	Public Property UserTeam() As UserTeam
		Get
			Return Me._UserTeam.Entity
		End Get
		Set
			Dim previousValue As UserTeam = Me._UserTeam.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserTeam.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserTeam.Entity = Nothing
					previousValue.UserFixtureCalculations.Remove(Me)
				End If
				Me._UserTeam.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserFixtureCalculations.Add(Me)
					Me._UserTeamIDA = value.UserTeamID
				Else
					Me._UserTeamIDA = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("UserTeam")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTeam_UserFixtureCalculation1", Storage:="_UserTeam1", ThisKey:="UserTeamIDB", OtherKey:="UserTeamID", IsForeignKey:=true)>  _
	Public Property UserTeam1() As UserTeam
		Get
			Return Me._UserTeam1.Entity
		End Get
		Set
			Dim previousValue As UserTeam = Me._UserTeam1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserTeam1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserTeam1.Entity = Nothing
					previousValue.UserFixtureCalculations1.Remove(Me)
				End If
				Me._UserTeam1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserFixtureCalculations1.Add(Me)
					Me._UserTeamIDB = value.UserTeamID
				Else
					Me._UserTeamIDB = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("UserTeam1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserTeam")>  _
Partial Public Class UserTeam
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserTeamID As Integer
	
	Private _Name As String
	
	Private _UserGroupID As Integer
	
	Private _UserId As System.Guid
	
	Private _SeasonResults As EntitySet(Of SeasonResult)
	
	Private _UserFixtureCalculations As EntitySet(Of UserFixtureCalculation)
	
	Private _UserFixtureCalculations1 As EntitySet(Of UserFixtureCalculation)
	
	Private _UserPlayers As EntitySet(Of UserPlayer)
	
	Private _UserGroup As EntityRef(Of UserGroup)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserTeamIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnUserGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserGroupIDChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SeasonResults = New EntitySet(Of SeasonResult)(AddressOf Me.attach_SeasonResults, AddressOf Me.detach_SeasonResults)
		Me._UserFixtureCalculations = New EntitySet(Of UserFixtureCalculation)(AddressOf Me.attach_UserFixtureCalculations, AddressOf Me.detach_UserFixtureCalculations)
		Me._UserFixtureCalculations1 = New EntitySet(Of UserFixtureCalculation)(AddressOf Me.attach_UserFixtureCalculations1, AddressOf Me.detach_UserFixtureCalculations1)
		Me._UserPlayers = New EntitySet(Of UserPlayer)(AddressOf Me.attach_UserPlayers, AddressOf Me.detach_UserPlayers)
		Me._UserGroup = CType(Nothing, EntityRef(Of UserGroup))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTeamID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserTeamID() As Integer
		Get
			Return Me._UserTeamID
		End Get
		Set
			If ((Me._UserTeamID = value)  _
						= false) Then
				Me.OnUserTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._UserTeamID = value
				Me.SendPropertyChanged("UserTeamID")
				Me.OnUserTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroupID", DbType:="Int NOT NULL")>  _
	Public Property UserGroupID() As Integer
		Get
			Return Me._UserGroupID
		End Get
		Set
			If ((Me._UserGroupID = value)  _
						= false) Then
				If Me._UserGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._UserGroupID = value
				Me.SendPropertyChanged("UserGroupID")
				Me.OnUserGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTeam_SeasonResult", Storage:="_SeasonResults", ThisKey:="UserTeamID", OtherKey:="UserTeamID")>  _
	Public Property SeasonResults() As EntitySet(Of SeasonResult)
		Get
			Return Me._SeasonResults
		End Get
		Set
			Me._SeasonResults.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTeam_UserFixtureCalculation", Storage:="_UserFixtureCalculations", ThisKey:="UserTeamID", OtherKey:="UserTeamIDA")>  _
	Public Property UserFixtureCalculations() As EntitySet(Of UserFixtureCalculation)
		Get
			Return Me._UserFixtureCalculations
		End Get
		Set
			Me._UserFixtureCalculations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTeam_UserFixtureCalculation1", Storage:="_UserFixtureCalculations1", ThisKey:="UserTeamID", OtherKey:="UserTeamIDB")>  _
	Public Property UserFixtureCalculations1() As EntitySet(Of UserFixtureCalculation)
		Get
			Return Me._UserFixtureCalculations1
		End Get
		Set
			Me._UserFixtureCalculations1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTeam_UserPlayer", Storage:="_UserPlayers", ThisKey:="UserTeamID", OtherKey:="UserTeamID")>  _
	Public Property UserPlayers() As EntitySet(Of UserPlayer)
		Get
			Return Me._UserPlayers
		End Get
		Set
			Me._UserPlayers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserGroup_UserTeam", Storage:="_UserGroup", ThisKey:="UserGroupID", OtherKey:="UserGroupID", IsForeignKey:=true)>  _
	Public Property UserGroup() As UserGroup
		Get
			Return Me._UserGroup.Entity
		End Get
		Set
			Dim previousValue As UserGroup = Me._UserGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserGroup.Entity = Nothing
					previousValue.UserTeams.Remove(Me)
				End If
				Me._UserGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserTeams.Add(Me)
					Me._UserGroupID = value.UserGroupID
				Else
					Me._UserGroupID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("UserGroup")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SeasonResults(ByVal entity As SeasonResult)
		Me.SendPropertyChanging
		entity.UserTeam = Me
	End Sub
	
	Private Sub detach_SeasonResults(ByVal entity As SeasonResult)
		Me.SendPropertyChanging
		entity.UserTeam = Nothing
	End Sub
	
	Private Sub attach_UserFixtureCalculations(ByVal entity As UserFixtureCalculation)
		Me.SendPropertyChanging
		entity.UserTeam = Me
	End Sub
	
	Private Sub detach_UserFixtureCalculations(ByVal entity As UserFixtureCalculation)
		Me.SendPropertyChanging
		entity.UserTeam = Nothing
	End Sub
	
	Private Sub attach_UserFixtureCalculations1(ByVal entity As UserFixtureCalculation)
		Me.SendPropertyChanging
		entity.UserTeam1 = Me
	End Sub
	
	Private Sub detach_UserFixtureCalculations1(ByVal entity As UserFixtureCalculation)
		Me.SendPropertyChanging
		entity.UserTeam1 = Nothing
	End Sub
	
	Private Sub attach_UserPlayers(ByVal entity As UserPlayer)
		Me.SendPropertyChanging
		entity.UserTeam = Me
	End Sub
	
	Private Sub detach_UserPlayers(ByVal entity As UserPlayer)
		Me.SendPropertyChanging
		entity.UserTeam = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserPlayer")>  _
Partial Public Class UserPlayer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserPlayerID As Integer
	
	Private _UserTeamID As Integer
	
	Private _PlayerID As Integer
	
	Private _UserGroupID As Integer
	
	Private _CompetitionID As Integer
	
	Private _Player As EntityRef(Of Player)
	
	Private _UserTeam As EntityRef(Of UserTeam)
	
	Private _UserGroup As EntityRef(Of UserGroup)
	
	Private _Competition As EntityRef(Of Competition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserPlayerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserPlayerIDChanged()
    End Sub
    Partial Private Sub OnUserTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserTeamIDChanged()
    End Sub
    Partial Private Sub OnPlayerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlayerIDChanged()
    End Sub
    Partial Private Sub OnUserGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserGroupIDChanged()
    End Sub
    Partial Private Sub OnCompetitionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCompetitionIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Player = CType(Nothing, EntityRef(Of Player))
		Me._UserTeam = CType(Nothing, EntityRef(Of UserTeam))
		Me._UserGroup = CType(Nothing, EntityRef(Of UserGroup))
		Me._Competition = CType(Nothing, EntityRef(Of Competition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserPlayerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserPlayerID() As Integer
		Get
			Return Me._UserPlayerID
		End Get
		Set
			If ((Me._UserPlayerID = value)  _
						= false) Then
				Me.OnUserPlayerIDChanging(value)
				Me.SendPropertyChanging
				Me._UserPlayerID = value
				Me.SendPropertyChanged("UserPlayerID")
				Me.OnUserPlayerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTeamID", DbType:="Int NOT NULL")>  _
	Public Property UserTeamID() As Integer
		Get
			Return Me._UserTeamID
		End Get
		Set
			If ((Me._UserTeamID = value)  _
						= false) Then
				If Me._UserTeam.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._UserTeamID = value
				Me.SendPropertyChanged("UserTeamID")
				Me.OnUserTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlayerID", DbType:="Int NOT NULL")>  _
	Public Property PlayerID() As Integer
		Get
			Return Me._PlayerID
		End Get
		Set
			If ((Me._PlayerID = value)  _
						= false) Then
				If Me._Player.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlayerIDChanging(value)
				Me.SendPropertyChanging
				Me._PlayerID = value
				Me.SendPropertyChanged("PlayerID")
				Me.OnPlayerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroupID", DbType:="Int NOT NULL")>  _
	Public Property UserGroupID() As Integer
		Get
			Return Me._UserGroupID
		End Get
		Set
			If ((Me._UserGroupID = value)  _
						= false) Then
				If Me._UserGroup.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._UserGroupID = value
				Me.SendPropertyChanged("UserGroupID")
				Me.OnUserGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompetitionID", DbType:="Int NOT NULL")>  _
	Public Property CompetitionID() As Integer
		Get
			Return Me._CompetitionID
		End Get
		Set
			If ((Me._CompetitionID = value)  _
						= false) Then
				If Me._Competition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCompetitionIDChanging(value)
				Me.SendPropertyChanging
				Me._CompetitionID = value
				Me.SendPropertyChanged("CompetitionID")
				Me.OnCompetitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_UserPlayer", Storage:="_Player", ThisKey:="PlayerID", OtherKey:="PlayerID", IsForeignKey:=true)>  _
	Public Property Player() As Player
		Get
			Return Me._Player.Entity
		End Get
		Set
			Dim previousValue As Player = Me._Player.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Player.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Player.Entity = Nothing
					previousValue.UserPlayers.Remove(Me)
				End If
				Me._Player.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserPlayers.Add(Me)
					Me._PlayerID = value.PlayerID
				Else
					Me._PlayerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Player")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserTeam_UserPlayer", Storage:="_UserTeam", ThisKey:="UserTeamID", OtherKey:="UserTeamID", IsForeignKey:=true)>  _
	Public Property UserTeam() As UserTeam
		Get
			Return Me._UserTeam.Entity
		End Get
		Set
			Dim previousValue As UserTeam = Me._UserTeam.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserTeam.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserTeam.Entity = Nothing
					previousValue.UserPlayers.Remove(Me)
				End If
				Me._UserTeam.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserPlayers.Add(Me)
					Me._UserTeamID = value.UserTeamID
				Else
					Me._UserTeamID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("UserTeam")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserGroup_UserPlayer", Storage:="_UserGroup", ThisKey:="UserGroupID", OtherKey:="UserGroupID", IsForeignKey:=true)>  _
	Public Property UserGroup() As UserGroup
		Get
			Return Me._UserGroup.Entity
		End Get
		Set
			Dim previousValue As UserGroup = Me._UserGroup.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserGroup.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserGroup.Entity = Nothing
					previousValue.UserPlayers.Remove(Me)
				End If
				Me._UserGroup.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserPlayers.Add(Me)
					Me._UserGroupID = value.UserGroupID
				Else
					Me._UserGroupID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("UserGroup")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Competition_UserPlayer", Storage:="_Competition", ThisKey:="CompetitionID", OtherKey:="CompetitionID", IsForeignKey:=true)>  _
	Public Property Competition() As Competition
		Get
			Return Me._Competition.Entity
		End Get
		Set
			Dim previousValue As Competition = Me._Competition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Competition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Competition.Entity = Nothing
					previousValue.UserPlayers.Remove(Me)
				End If
				Me._Competition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UserPlayers.Add(Me)
					Me._CompetitionID = value.CompetitionID
				Else
					Me._CompetitionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Competition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Transfer")>  _
Partial Public Class Transfer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TransferId As System.Guid
	
	Private _PlayerID As Integer
	
	Private _TeamID As Integer
	
	Private _FromDate As Date
	
	Private _ToDate As System.Nullable(Of Date)
	
	Private _TransferFee As System.Nullable(Of Double)
	
	Private _Player As EntityRef(Of Player)
	
	Private _Team As EntityRef(Of Team)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransferIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTransferIdChanged()
    End Sub
    Partial Private Sub OnPlayerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlayerIDChanged()
    End Sub
    Partial Private Sub OnTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTeamIDChanged()
    End Sub
    Partial Private Sub OnFromDateChanging(value As Date)
    End Sub
    Partial Private Sub OnFromDateChanged()
    End Sub
    Partial Private Sub OnToDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnToDateChanged()
    End Sub
    Partial Private Sub OnTransferFeeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnTransferFeeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Player = CType(Nothing, EntityRef(Of Player))
		Me._Team = CType(Nothing, EntityRef(Of Team))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransferId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TransferId() As System.Guid
		Get
			Return Me._TransferId
		End Get
		Set
			If ((Me._TransferId = value)  _
						= false) Then
				Me.OnTransferIdChanging(value)
				Me.SendPropertyChanging
				Me._TransferId = value
				Me.SendPropertyChanged("TransferId")
				Me.OnTransferIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlayerID", DbType:="Int NOT NULL")>  _
	Public Property PlayerID() As Integer
		Get
			Return Me._PlayerID
		End Get
		Set
			If ((Me._PlayerID = value)  _
						= false) Then
				If Me._Player.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlayerIDChanging(value)
				Me.SendPropertyChanging
				Me._PlayerID = value
				Me.SendPropertyChanged("PlayerID")
				Me.OnPlayerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeamID", DbType:="Int NOT NULL")>  _
	Public Property TeamID() As Integer
		Get
			Return Me._TeamID
		End Get
		Set
			If ((Me._TeamID = value)  _
						= false) Then
				If Me._Team.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._TeamID = value
				Me.SendPropertyChanged("TeamID")
				Me.OnTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromDate", DbType:="DateTime NOT NULL")>  _
	Public Property FromDate() As Date
		Get
			Return Me._FromDate
		End Get
		Set
			If ((Me._FromDate = value)  _
						= false) Then
				Me.OnFromDateChanging(value)
				Me.SendPropertyChanging
				Me._FromDate = value
				Me.SendPropertyChanged("FromDate")
				Me.OnFromDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToDate", DbType:="DateTime")>  _
	Public Property ToDate() As System.Nullable(Of Date)
		Get
			Return Me._ToDate
		End Get
		Set
			If (Me._ToDate.Equals(value) = false) Then
				Me.OnToDateChanging(value)
				Me.SendPropertyChanging
				Me._ToDate = value
				Me.SendPropertyChanged("ToDate")
				Me.OnToDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransferFee", DbType:="Float")>  _
	Public Property TransferFee() As System.Nullable(Of Double)
		Get
			Return Me._TransferFee
		End Get
		Set
			If (Me._TransferFee.Equals(value) = false) Then
				Me.OnTransferFeeChanging(value)
				Me.SendPropertyChanging
				Me._TransferFee = value
				Me.SendPropertyChanged("TransferFee")
				Me.OnTransferFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_Transfer", Storage:="_Player", ThisKey:="PlayerID", OtherKey:="PlayerID", IsForeignKey:=true)>  _
	Public Property Player() As Player
		Get
			Return Me._Player.Entity
		End Get
		Set
			Dim previousValue As Player = Me._Player.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Player.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Player.Entity = Nothing
					previousValue.Transfers.Remove(Me)
				End If
				Me._Player.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transfers.Add(Me)
					Me._PlayerID = value.PlayerID
				Else
					Me._PlayerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Player")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Transfer", Storage:="_Team", ThisKey:="TeamID", OtherKey:="TeamID", IsForeignKey:=true)>  _
	Public Property Team() As Team
		Get
			Return Me._Team.Entity
		End Get
		Set
			Dim previousValue As Team = Me._Team.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Team.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Team.Entity = Nothing
					previousValue.Transfers.Remove(Me)
				End If
				Me._Team.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Transfers.Add(Me)
					Me._TeamID = value.TeamID
				Else
					Me._TeamID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Team")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Week")>  _
Partial Public Class Week
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WeekID As Integer
	
	Private _WeekName As String
	
	Private _CompetitionID As Integer
	
	Private _CurrentWeek As Boolean
	
	Private _WeekNo As Integer
	
	Private _FromDate As System.Nullable(Of Date)
	
	Private _ToDate As System.Nullable(Of Date)
	
	Private _Fixtures As EntitySet(Of Fixture)
	
	Private _Events As EntitySet(Of [Event])
	
	Private _TheLists As EntitySet(Of TheList)
	
	Private _Competition As EntityRef(Of Competition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWeekIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekIDChanged()
    End Sub
    Partial Private Sub OnWeekNameChanging(value As String)
    End Sub
    Partial Private Sub OnWeekNameChanged()
    End Sub
    Partial Private Sub OnCompetitionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCompetitionIDChanged()
    End Sub
    Partial Private Sub OnCurrentWeekChanging(value As Boolean)
    End Sub
    Partial Private Sub OnCurrentWeekChanged()
    End Sub
    Partial Private Sub OnWeekNoChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekNoChanged()
    End Sub
    Partial Private Sub OnFromDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFromDateChanged()
    End Sub
    Partial Private Sub OnToDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnToDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Fixtures = New EntitySet(Of Fixture)(AddressOf Me.attach_Fixtures, AddressOf Me.detach_Fixtures)
		Me._Events = New EntitySet(Of [Event])(AddressOf Me.attach_Events, AddressOf Me.detach_Events)
		Me._TheLists = New EntitySet(Of TheList)(AddressOf Me.attach_TheLists, AddressOf Me.detach_TheLists)
		Me._Competition = CType(Nothing, EntityRef(Of Competition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WeekID() As Integer
		Get
			Return Me._WeekID
		End Get
		Set
			If ((Me._WeekID = value)  _
						= false) Then
				Me.OnWeekIDChanging(value)
				Me.SendPropertyChanging
				Me._WeekID = value
				Me.SendPropertyChanged("WeekID")
				Me.OnWeekIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property WeekName() As String
		Get
			Return Me._WeekName
		End Get
		Set
			If (String.Equals(Me._WeekName, value) = false) Then
				Me.OnWeekNameChanging(value)
				Me.SendPropertyChanging
				Me._WeekName = value
				Me.SendPropertyChanged("WeekName")
				Me.OnWeekNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompetitionID", DbType:="Int NOT NULL")>  _
	Public Property CompetitionID() As Integer
		Get
			Return Me._CompetitionID
		End Get
		Set
			If ((Me._CompetitionID = value)  _
						= false) Then
				If Me._Competition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCompetitionIDChanging(value)
				Me.SendPropertyChanging
				Me._CompetitionID = value
				Me.SendPropertyChanged("CompetitionID")
				Me.OnCompetitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentWeek", DbType:="Bit NOT NULL")>  _
	Public Property CurrentWeek() As Boolean
		Get
			Return Me._CurrentWeek
		End Get
		Set
			If ((Me._CurrentWeek = value)  _
						= false) Then
				Me.OnCurrentWeekChanging(value)
				Me.SendPropertyChanging
				Me._CurrentWeek = value
				Me.SendPropertyChanged("CurrentWeek")
				Me.OnCurrentWeekChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekNo", DbType:="Int NOT NULL")>  _
	Public Property WeekNo() As Integer
		Get
			Return Me._WeekNo
		End Get
		Set
			If ((Me._WeekNo = value)  _
						= false) Then
				Me.OnWeekNoChanging(value)
				Me.SendPropertyChanging
				Me._WeekNo = value
				Me.SendPropertyChanged("WeekNo")
				Me.OnWeekNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromDate", DbType:="DateTime")>  _
	Public Property FromDate() As System.Nullable(Of Date)
		Get
			Return Me._FromDate
		End Get
		Set
			If (Me._FromDate.Equals(value) = false) Then
				Me.OnFromDateChanging(value)
				Me.SendPropertyChanging
				Me._FromDate = value
				Me.SendPropertyChanged("FromDate")
				Me.OnFromDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToDate", DbType:="DateTime")>  _
	Public Property ToDate() As System.Nullable(Of Date)
		Get
			Return Me._ToDate
		End Get
		Set
			If (Me._ToDate.Equals(value) = false) Then
				Me.OnToDateChanging(value)
				Me.SendPropertyChanging
				Me._ToDate = value
				Me.SendPropertyChanged("ToDate")
				Me.OnToDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Week_Fixture", Storage:="_Fixtures", ThisKey:="WeekID", OtherKey:="WeekID")>  _
	Public Property Fixtures() As EntitySet(Of Fixture)
		Get
			Return Me._Fixtures
		End Get
		Set
			Me._Fixtures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Week_Event", Storage:="_Events", ThisKey:="WeekID", OtherKey:="WeekID")>  _
	Public Property Events() As EntitySet(Of [Event])
		Get
			Return Me._Events
		End Get
		Set
			Me._Events.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Week_TheList", Storage:="_TheLists", ThisKey:="WeekID", OtherKey:="WeekID")>  _
	Public Property TheLists() As EntitySet(Of TheList)
		Get
			Return Me._TheLists
		End Get
		Set
			Me._TheLists.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Competition_Week", Storage:="_Competition", ThisKey:="CompetitionID", OtherKey:="CompetitionID", IsForeignKey:=true)>  _
	Public Property Competition() As Competition
		Get
			Return Me._Competition.Entity
		End Get
		Set
			Dim previousValue As Competition = Me._Competition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Competition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Competition.Entity = Nothing
					previousValue.Weeks.Remove(Me)
				End If
				Me._Competition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Weeks.Add(Me)
					Me._CompetitionID = value.CompetitionID
				Else
					Me._CompetitionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Competition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Fixtures(ByVal entity As Fixture)
		Me.SendPropertyChanging
		entity.Week = Me
	End Sub
	
	Private Sub detach_Fixtures(ByVal entity As Fixture)
		Me.SendPropertyChanging
		entity.Week = Nothing
	End Sub
	
	Private Sub attach_Events(ByVal entity As [Event])
		Me.SendPropertyChanging
		entity.Week = Me
	End Sub
	
	Private Sub detach_Events(ByVal entity As [Event])
		Me.SendPropertyChanging
		entity.Week = Nothing
	End Sub
	
	Private Sub attach_TheLists(ByVal entity As TheList)
		Me.SendPropertyChanging
		entity.Week = Me
	End Sub
	
	Private Sub detach_TheLists(ByVal entity As TheList)
		Me.SendPropertyChanging
		entity.Week = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserGroup")>  _
Partial Public Class UserGroup
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserGroupID As Integer
	
	Private _Name As String
	
	Private _NoPlayers As System.Nullable(Of Integer)
	
	Private _UserTeams As EntitySet(Of UserTeam)
	
	Private _UserPlayers As EntitySet(Of UserPlayer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserGroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserGroupIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnNoPlayersChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoPlayersChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserTeams = New EntitySet(Of UserTeam)(AddressOf Me.attach_UserTeams, AddressOf Me.detach_UserTeams)
		Me._UserPlayers = New EntitySet(Of UserPlayer)(AddressOf Me.attach_UserPlayers, AddressOf Me.detach_UserPlayers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserGroupID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserGroupID() As Integer
		Get
			Return Me._UserGroupID
		End Get
		Set
			If ((Me._UserGroupID = value)  _
						= false) Then
				Me.OnUserGroupIDChanging(value)
				Me.SendPropertyChanging
				Me._UserGroupID = value
				Me.SendPropertyChanged("UserGroupID")
				Me.OnUserGroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoPlayers", DbType:="Int")>  _
	Public Property NoPlayers() As System.Nullable(Of Integer)
		Get
			Return Me._NoPlayers
		End Get
		Set
			If (Me._NoPlayers.Equals(value) = false) Then
				Me.OnNoPlayersChanging(value)
				Me.SendPropertyChanging
				Me._NoPlayers = value
				Me.SendPropertyChanged("NoPlayers")
				Me.OnNoPlayersChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserGroup_UserTeam", Storage:="_UserTeams", ThisKey:="UserGroupID", OtherKey:="UserGroupID")>  _
	Public Property UserTeams() As EntitySet(Of UserTeam)
		Get
			Return Me._UserTeams
		End Get
		Set
			Me._UserTeams.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserGroup_UserPlayer", Storage:="_UserPlayers", ThisKey:="UserGroupID", OtherKey:="UserGroupID")>  _
	Public Property UserPlayers() As EntitySet(Of UserPlayer)
		Get
			Return Me._UserPlayers
		End Get
		Set
			Me._UserPlayers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserTeams(ByVal entity As UserTeam)
		Me.SendPropertyChanging
		entity.UserGroup = Me
	End Sub
	
	Private Sub detach_UserTeams(ByVal entity As UserTeam)
		Me.SendPropertyChanging
		entity.UserGroup = Nothing
	End Sub
	
	Private Sub attach_UserPlayers(ByVal entity As UserPlayer)
		Me.SendPropertyChanging
		entity.UserGroup = Me
	End Sub
	
	Private Sub detach_UserPlayers(ByVal entity As UserPlayer)
		Me.SendPropertyChanging
		entity.UserGroup = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WeekUserPlayer")>  _
Partial Public Class WeekUserPlayer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WeekUserPlayerID As Integer
	
	Private _PlayerID As Integer
	
	Private _WeekID As Integer
	
	Private _StatusID As Integer
	
	Private _UserTeamID As Integer
	
	Private _Draft As Boolean
	
	Private _Player As EntityRef(Of Player)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWeekUserPlayerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekUserPlayerIDChanged()
    End Sub
    Partial Private Sub OnPlayerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlayerIDChanged()
    End Sub
    Partial Private Sub OnWeekIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekIDChanged()
    End Sub
    Partial Private Sub OnStatusIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusIDChanged()
    End Sub
    Partial Private Sub OnUserTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserTeamIDChanged()
    End Sub
    Partial Private Sub OnDraftChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDraftChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Player = CType(Nothing, EntityRef(Of Player))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekUserPlayerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WeekUserPlayerID() As Integer
		Get
			Return Me._WeekUserPlayerID
		End Get
		Set
			If ((Me._WeekUserPlayerID = value)  _
						= false) Then
				Me.OnWeekUserPlayerIDChanging(value)
				Me.SendPropertyChanging
				Me._WeekUserPlayerID = value
				Me.SendPropertyChanged("WeekUserPlayerID")
				Me.OnWeekUserPlayerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlayerID", DbType:="Int NOT NULL")>  _
	Public Property PlayerID() As Integer
		Get
			Return Me._PlayerID
		End Get
		Set
			If ((Me._PlayerID = value)  _
						= false) Then
				If Me._Player.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlayerIDChanging(value)
				Me.SendPropertyChanging
				Me._PlayerID = value
				Me.SendPropertyChanged("PlayerID")
				Me.OnPlayerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekID", DbType:="Int NOT NULL")>  _
	Public Property WeekID() As Integer
		Get
			Return Me._WeekID
		End Get
		Set
			If ((Me._WeekID = value)  _
						= false) Then
				Me.OnWeekIDChanging(value)
				Me.SendPropertyChanging
				Me._WeekID = value
				Me.SendPropertyChanged("WeekID")
				Me.OnWeekIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusID", DbType:="Int NOT NULL")>  _
	Public Property StatusID() As Integer
		Get
			Return Me._StatusID
		End Get
		Set
			If ((Me._StatusID = value)  _
						= false) Then
				Me.OnStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._StatusID = value
				Me.SendPropertyChanged("StatusID")
				Me.OnStatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTeamID", DbType:="Int NOT NULL")>  _
	Public Property UserTeamID() As Integer
		Get
			Return Me._UserTeamID
		End Get
		Set
			If ((Me._UserTeamID = value)  _
						= false) Then
				Me.OnUserTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._UserTeamID = value
				Me.SendPropertyChanged("UserTeamID")
				Me.OnUserTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Draft", DbType:="Bit NOT NULL")>  _
	Public Property Draft() As Boolean
		Get
			Return Me._Draft
		End Get
		Set
			If ((Me._Draft = value)  _
						= false) Then
				Me.OnDraftChanging(value)
				Me.SendPropertyChanging
				Me._Draft = value
				Me.SendPropertyChanged("Draft")
				Me.OnDraftChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_WeekUserPlayer", Storage:="_Player", ThisKey:="PlayerID", OtherKey:="PlayerID", IsForeignKey:=true)>  _
	Public Property Player() As Player
		Get
			Return Me._Player.Entity
		End Get
		Set
			Dim previousValue As Player = Me._Player.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Player.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Player.Entity = Nothing
					previousValue.WeekUserPlayers.Remove(Me)
				End If
				Me._Player.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.WeekUserPlayers.Add(Me)
					Me._PlayerID = value.PlayerID
				Else
					Me._PlayerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Player")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Team")>  _
Partial Public Class Team
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TeamID As Integer
	
	Private _TeamName As String
	
	Private _TeamTypeID As Integer
	
	Private _InActive As System.Nullable(Of Boolean)
	
	Private _Players As EntitySet(Of Player)
	
	Private _Players1 As EntitySet(Of Player)
	
	Private _Fixtures As EntitySet(Of Fixture)
	
	Private _Fixtures1 As EntitySet(Of Fixture)
	
	Private _Transfers As EntitySet(Of Transfer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTeamIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTeamIDChanged()
    End Sub
    Partial Private Sub OnTeamNameChanging(value As String)
    End Sub
    Partial Private Sub OnTeamNameChanged()
    End Sub
    Partial Private Sub OnTeamTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTeamTypeIDChanged()
    End Sub
    Partial Private Sub OnInActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnInActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Players = New EntitySet(Of Player)(AddressOf Me.attach_Players, AddressOf Me.detach_Players)
		Me._Players1 = New EntitySet(Of Player)(AddressOf Me.attach_Players1, AddressOf Me.detach_Players1)
		Me._Fixtures = New EntitySet(Of Fixture)(AddressOf Me.attach_Fixtures, AddressOf Me.detach_Fixtures)
		Me._Fixtures1 = New EntitySet(Of Fixture)(AddressOf Me.attach_Fixtures1, AddressOf Me.detach_Fixtures1)
		Me._Transfers = New EntitySet(Of Transfer)(AddressOf Me.attach_Transfers, AddressOf Me.detach_Transfers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeamID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TeamID() As Integer
		Get
			Return Me._TeamID
		End Get
		Set
			If ((Me._TeamID = value)  _
						= false) Then
				Me.OnTeamIDChanging(value)
				Me.SendPropertyChanging
				Me._TeamID = value
				Me.SendPropertyChanged("TeamID")
				Me.OnTeamIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeamName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TeamName() As String
		Get
			Return Me._TeamName
		End Get
		Set
			If (String.Equals(Me._TeamName, value) = false) Then
				Me.OnTeamNameChanging(value)
				Me.SendPropertyChanging
				Me._TeamName = value
				Me.SendPropertyChanged("TeamName")
				Me.OnTeamNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeamTypeID", DbType:="Int NOT NULL")>  _
	Public Property TeamTypeID() As Integer
		Get
			Return Me._TeamTypeID
		End Get
		Set
			If ((Me._TeamTypeID = value)  _
						= false) Then
				Me.OnTeamTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._TeamTypeID = value
				Me.SendPropertyChanged("TeamTypeID")
				Me.OnTeamTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InActive", DbType:="Bit")>  _
	Public Property InActive() As System.Nullable(Of Boolean)
		Get
			Return Me._InActive
		End Get
		Set
			If (Me._InActive.Equals(value) = false) Then
				Me.OnInActiveChanging(value)
				Me.SendPropertyChanging
				Me._InActive = value
				Me.SendPropertyChanged("InActive")
				Me.OnInActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Player", Storage:="_Players", ThisKey:="TeamID", OtherKey:="TeamID")>  _
	Public Property Players() As EntitySet(Of Player)
		Get
			Return Me._Players
		End Get
		Set
			Me._Players.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Player1", Storage:="_Players1", ThisKey:="TeamID", OtherKey:="NationalTeamID")>  _
	Public Property Players1() As EntitySet(Of Player)
		Get
			Return Me._Players1
		End Get
		Set
			Me._Players1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Fixture", Storage:="_Fixtures", ThisKey:="TeamID", OtherKey:="AwayTeamID")>  _
	Public Property Fixtures() As EntitySet(Of Fixture)
		Get
			Return Me._Fixtures
		End Get
		Set
			Me._Fixtures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Fixture1", Storage:="_Fixtures1", ThisKey:="TeamID", OtherKey:="HomeTeamID")>  _
	Public Property Fixtures1() As EntitySet(Of Fixture)
		Get
			Return Me._Fixtures1
		End Get
		Set
			Me._Fixtures1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Transfer", Storage:="_Transfers", ThisKey:="TeamID", OtherKey:="TeamID")>  _
	Public Property Transfers() As EntitySet(Of Transfer)
		Get
			Return Me._Transfers
		End Get
		Set
			Me._Transfers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Players(ByVal entity As Player)
		Me.SendPropertyChanging
		entity.Team = Me
	End Sub
	
	Private Sub detach_Players(ByVal entity As Player)
		Me.SendPropertyChanging
		entity.Team = Nothing
	End Sub
	
	Private Sub attach_Players1(ByVal entity As Player)
		Me.SendPropertyChanging
		entity.Team1 = Me
	End Sub
	
	Private Sub detach_Players1(ByVal entity As Player)
		Me.SendPropertyChanging
		entity.Team1 = Nothing
	End Sub
	
	Private Sub attach_Fixtures(ByVal entity As Fixture)
		Me.SendPropertyChanging
		entity.Team = Me
	End Sub
	
	Private Sub detach_Fixtures(ByVal entity As Fixture)
		Me.SendPropertyChanging
		entity.Team = Nothing
	End Sub
	
	Private Sub attach_Fixtures1(ByVal entity As Fixture)
		Me.SendPropertyChanging
		entity.Team1 = Me
	End Sub
	
	Private Sub detach_Fixtures1(ByVal entity As Fixture)
		Me.SendPropertyChanging
		entity.Team1 = Nothing
	End Sub
	
	Private Sub attach_Transfers(ByVal entity As Transfer)
		Me.SendPropertyChanging
		entity.Team = Me
	End Sub
	
	Private Sub detach_Transfers(ByVal entity As Transfer)
		Me.SendPropertyChanging
		entity.Team = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Competition")>  _
Partial Public Class Competition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CompetitionID As Integer
	
	Private _Name As String
	
	Private _CurrentCompetition As System.Nullable(Of Boolean)
	
	Private _FromDate As Date
	
	Private _ToDate As System.Nullable(Of Date)
	
	Private _SquadSize As Integer
	
	Private _TeamTypeID As Integer
	
	Private _UserPlayers As EntitySet(Of UserPlayer)
	
	Private _Weeks As EntitySet(Of Week)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCompetitionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCompetitionIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCurrentCompetitionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCurrentCompetitionChanged()
    End Sub
    Partial Private Sub OnFromDateChanging(value As Date)
    End Sub
    Partial Private Sub OnFromDateChanged()
    End Sub
    Partial Private Sub OnToDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnToDateChanged()
    End Sub
    Partial Private Sub OnSquadSizeChanging(value As Integer)
    End Sub
    Partial Private Sub OnSquadSizeChanged()
    End Sub
    Partial Private Sub OnTeamTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTeamTypeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UserPlayers = New EntitySet(Of UserPlayer)(AddressOf Me.attach_UserPlayers, AddressOf Me.detach_UserPlayers)
		Me._Weeks = New EntitySet(Of Week)(AddressOf Me.attach_Weeks, AddressOf Me.detach_Weeks)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompetitionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CompetitionID() As Integer
		Get
			Return Me._CompetitionID
		End Get
		Set
			If ((Me._CompetitionID = value)  _
						= false) Then
				Me.OnCompetitionIDChanging(value)
				Me.SendPropertyChanging
				Me._CompetitionID = value
				Me.SendPropertyChanged("CompetitionID")
				Me.OnCompetitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentCompetition", DbType:="Bit")>  _
	Public Property CurrentCompetition() As System.Nullable(Of Boolean)
		Get
			Return Me._CurrentCompetition
		End Get
		Set
			If (Me._CurrentCompetition.Equals(value) = false) Then
				Me.OnCurrentCompetitionChanging(value)
				Me.SendPropertyChanging
				Me._CurrentCompetition = value
				Me.SendPropertyChanged("CurrentCompetition")
				Me.OnCurrentCompetitionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromDate", DbType:="DateTime NOT NULL")>  _
	Public Property FromDate() As Date
		Get
			Return Me._FromDate
		End Get
		Set
			If ((Me._FromDate = value)  _
						= false) Then
				Me.OnFromDateChanging(value)
				Me.SendPropertyChanging
				Me._FromDate = value
				Me.SendPropertyChanged("FromDate")
				Me.OnFromDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToDate", DbType:="DateTime")>  _
	Public Property ToDate() As System.Nullable(Of Date)
		Get
			Return Me._ToDate
		End Get
		Set
			If (Me._ToDate.Equals(value) = false) Then
				Me.OnToDateChanging(value)
				Me.SendPropertyChanging
				Me._ToDate = value
				Me.SendPropertyChanged("ToDate")
				Me.OnToDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SquadSize", DbType:="Int NOT NULL")>  _
	Public Property SquadSize() As Integer
		Get
			Return Me._SquadSize
		End Get
		Set
			If ((Me._SquadSize = value)  _
						= false) Then
				Me.OnSquadSizeChanging(value)
				Me.SendPropertyChanging
				Me._SquadSize = value
				Me.SendPropertyChanged("SquadSize")
				Me.OnSquadSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeamTypeID", DbType:="Int NOT NULL")>  _
	Public Property TeamTypeID() As Integer
		Get
			Return Me._TeamTypeID
		End Get
		Set
			If ((Me._TeamTypeID = value)  _
						= false) Then
				Me.OnTeamTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._TeamTypeID = value
				Me.SendPropertyChanged("TeamTypeID")
				Me.OnTeamTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Competition_UserPlayer", Storage:="_UserPlayers", ThisKey:="CompetitionID", OtherKey:="CompetitionID")>  _
	Public Property UserPlayers() As EntitySet(Of UserPlayer)
		Get
			Return Me._UserPlayers
		End Get
		Set
			Me._UserPlayers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Competition_Week", Storage:="_Weeks", ThisKey:="CompetitionID", OtherKey:="CompetitionID")>  _
	Public Property Weeks() As EntitySet(Of Week)
		Get
			Return Me._Weeks
		End Get
		Set
			Me._Weeks.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UserPlayers(ByVal entity As UserPlayer)
		Me.SendPropertyChanging
		entity.Competition = Me
	End Sub
	
	Private Sub detach_UserPlayers(ByVal entity As UserPlayer)
		Me.SendPropertyChanging
		entity.Competition = Nothing
	End Sub
	
	Private Sub attach_Weeks(ByVal entity As Week)
		Me.SendPropertyChanging
		entity.Competition = Me
	End Sub
	
	Private Sub detach_Weeks(ByVal entity As Week)
		Me.SendPropertyChanging
		entity.Competition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TheList")>  _
Partial Public Class TheList
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TheListID As Integer
	
	Private _PlayerID As Integer
	
	Private _WeekID As Integer
	
	Private _TotalPoints As Single
	
	Private _WeekPoints As Single
	
	Private _GoalsScored As Integer
	
	Private _Assists As Integer
	
	Private _GoalsConceeded As Integer
	
	Private _CleanSheets As Integer
	
	Private _YellowCards As Integer
	
	Private _RedCards As Integer
	
	Private _MinutesPlayed As Integer
	
	Private _Player As EntityRef(Of Player)
	
	Private _Week As EntityRef(Of Week)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTheListIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTheListIDChanged()
    End Sub
    Partial Private Sub OnPlayerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlayerIDChanged()
    End Sub
    Partial Private Sub OnWeekIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeekIDChanged()
    End Sub
    Partial Private Sub OnTotalPointsChanging(value As Single)
    End Sub
    Partial Private Sub OnTotalPointsChanged()
    End Sub
    Partial Private Sub OnWeekPointsChanging(value As Single)
    End Sub
    Partial Private Sub OnWeekPointsChanged()
    End Sub
    Partial Private Sub OnGoalsScoredChanging(value As Integer)
    End Sub
    Partial Private Sub OnGoalsScoredChanged()
    End Sub
    Partial Private Sub OnAssistsChanging(value As Integer)
    End Sub
    Partial Private Sub OnAssistsChanged()
    End Sub
    Partial Private Sub OnGoalsConceededChanging(value As Integer)
    End Sub
    Partial Private Sub OnGoalsConceededChanged()
    End Sub
    Partial Private Sub OnCleanSheetsChanging(value As Integer)
    End Sub
    Partial Private Sub OnCleanSheetsChanged()
    End Sub
    Partial Private Sub OnYellowCardsChanging(value As Integer)
    End Sub
    Partial Private Sub OnYellowCardsChanged()
    End Sub
    Partial Private Sub OnRedCardsChanging(value As Integer)
    End Sub
    Partial Private Sub OnRedCardsChanged()
    End Sub
    Partial Private Sub OnMinutesPlayedChanging(value As Integer)
    End Sub
    Partial Private Sub OnMinutesPlayedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Player = CType(Nothing, EntityRef(Of Player))
		Me._Week = CType(Nothing, EntityRef(Of Week))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TheListID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TheListID() As Integer
		Get
			Return Me._TheListID
		End Get
		Set
			If ((Me._TheListID = value)  _
						= false) Then
				Me.OnTheListIDChanging(value)
				Me.SendPropertyChanging
				Me._TheListID = value
				Me.SendPropertyChanged("TheListID")
				Me.OnTheListIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlayerID", DbType:="Int NOT NULL")>  _
	Public Property PlayerID() As Integer
		Get
			Return Me._PlayerID
		End Get
		Set
			If ((Me._PlayerID = value)  _
						= false) Then
				If Me._Player.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlayerIDChanging(value)
				Me.SendPropertyChanging
				Me._PlayerID = value
				Me.SendPropertyChanged("PlayerID")
				Me.OnPlayerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekID", DbType:="Int NOT NULL")>  _
	Public Property WeekID() As Integer
		Get
			Return Me._WeekID
		End Get
		Set
			If ((Me._WeekID = value)  _
						= false) Then
				If Me._Week.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWeekIDChanging(value)
				Me.SendPropertyChanging
				Me._WeekID = value
				Me.SendPropertyChanged("WeekID")
				Me.OnWeekIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalPoints", DbType:="Real NOT NULL")>  _
	Public Property TotalPoints() As Single
		Get
			Return Me._TotalPoints
		End Get
		Set
			If ((Me._TotalPoints = value)  _
						= false) Then
				Me.OnTotalPointsChanging(value)
				Me.SendPropertyChanging
				Me._TotalPoints = value
				Me.SendPropertyChanged("TotalPoints")
				Me.OnTotalPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeekPoints", DbType:="Real NOT NULL")>  _
	Public Property WeekPoints() As Single
		Get
			Return Me._WeekPoints
		End Get
		Set
			If ((Me._WeekPoints = value)  _
						= false) Then
				Me.OnWeekPointsChanging(value)
				Me.SendPropertyChanging
				Me._WeekPoints = value
				Me.SendPropertyChanged("WeekPoints")
				Me.OnWeekPointsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GoalsScored", DbType:="Int NOT NULL")>  _
	Public Property GoalsScored() As Integer
		Get
			Return Me._GoalsScored
		End Get
		Set
			If ((Me._GoalsScored = value)  _
						= false) Then
				Me.OnGoalsScoredChanging(value)
				Me.SendPropertyChanging
				Me._GoalsScored = value
				Me.SendPropertyChanged("GoalsScored")
				Me.OnGoalsScoredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Assists", DbType:="Int NOT NULL")>  _
	Public Property Assists() As Integer
		Get
			Return Me._Assists
		End Get
		Set
			If ((Me._Assists = value)  _
						= false) Then
				Me.OnAssistsChanging(value)
				Me.SendPropertyChanging
				Me._Assists = value
				Me.SendPropertyChanged("Assists")
				Me.OnAssistsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GoalsConceeded", DbType:="Int NOT NULL")>  _
	Public Property GoalsConceeded() As Integer
		Get
			Return Me._GoalsConceeded
		End Get
		Set
			If ((Me._GoalsConceeded = value)  _
						= false) Then
				Me.OnGoalsConceededChanging(value)
				Me.SendPropertyChanging
				Me._GoalsConceeded = value
				Me.SendPropertyChanged("GoalsConceeded")
				Me.OnGoalsConceededChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CleanSheets", DbType:="Int NOT NULL")>  _
	Public Property CleanSheets() As Integer
		Get
			Return Me._CleanSheets
		End Get
		Set
			If ((Me._CleanSheets = value)  _
						= false) Then
				Me.OnCleanSheetsChanging(value)
				Me.SendPropertyChanging
				Me._CleanSheets = value
				Me.SendPropertyChanged("CleanSheets")
				Me.OnCleanSheetsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YellowCards", DbType:="Int NOT NULL")>  _
	Public Property YellowCards() As Integer
		Get
			Return Me._YellowCards
		End Get
		Set
			If ((Me._YellowCards = value)  _
						= false) Then
				Me.OnYellowCardsChanging(value)
				Me.SendPropertyChanging
				Me._YellowCards = value
				Me.SendPropertyChanged("YellowCards")
				Me.OnYellowCardsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RedCards", DbType:="Int NOT NULL")>  _
	Public Property RedCards() As Integer
		Get
			Return Me._RedCards
		End Get
		Set
			If ((Me._RedCards = value)  _
						= false) Then
				Me.OnRedCardsChanging(value)
				Me.SendPropertyChanging
				Me._RedCards = value
				Me.SendPropertyChanged("RedCards")
				Me.OnRedCardsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinutesPlayed", DbType:="Int NOT NULL")>  _
	Public Property MinutesPlayed() As Integer
		Get
			Return Me._MinutesPlayed
		End Get
		Set
			If ((Me._MinutesPlayed = value)  _
						= false) Then
				Me.OnMinutesPlayedChanging(value)
				Me.SendPropertyChanging
				Me._MinutesPlayed = value
				Me.SendPropertyChanged("MinutesPlayed")
				Me.OnMinutesPlayedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Player_TheList", Storage:="_Player", ThisKey:="PlayerID", OtherKey:="PlayerID", IsForeignKey:=true)>  _
	Public Property Player() As Player
		Get
			Return Me._Player.Entity
		End Get
		Set
			Dim previousValue As Player = Me._Player.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Player.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Player.Entity = Nothing
					previousValue.TheLists.Remove(Me)
				End If
				Me._Player.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TheLists.Add(Me)
					Me._PlayerID = value.PlayerID
				Else
					Me._PlayerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Player")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Week_TheList", Storage:="_Week", ThisKey:="WeekID", OtherKey:="WeekID", IsForeignKey:=true)>  _
	Public Property Week() As Week
		Get
			Return Me._Week.Entity
		End Get
		Set
			Dim previousValue As Week = Me._Week.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Week.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Week.Entity = Nothing
					previousValue.TheLists.Remove(Me)
				End If
				Me._Week.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TheLists.Add(Me)
					Me._WeekID = value.WeekID
				Else
					Me._WeekID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Week")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
